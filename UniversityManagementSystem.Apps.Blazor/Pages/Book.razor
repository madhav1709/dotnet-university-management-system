@page "/Books/{BookId:int}"
@layout AuthenticationGuard
@inject HttpClient HttpClient

<TemplatedHeader Subtitle="Use the form below to update or create a book." Title="Book">
    <ToolbarContent>
        <a class="btn btn-primary mdi mdi-cancel" href="Books">Cancel</a>
    </ToolbarContent>
</TemplatedHeader>

@if (IsLoading)
{
    <TemplatedSpinner/>
}
else
{
    <EditForm Model="@Model" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText class="form-control" id="name" @bind-Value="@Model.Name"/>
            <ValidationMessage For="@(() => Model.Name)"/>
        </div>

        <div class="form-group">
            <label for="author">Author</label>
            <InputText class="form-control" id="author" @bind-Value="@Model.Author"/>
            <ValidationMessage For="@(() => Model.Author)"/>
        </div>

        <button class="btn btn-primary mdi mdi-content-save" type="submit">Save</button>
    </EditForm>
}

@code
{

    [Parameter]
    private int BookId { get; set; }

    private bool IsCreating => BookId <= 0;

    private bool IsLoading => Model == null;

    private bool IsUpdating => BookId > 0;

    private Models.Book Model { get; set; }

    protected override async Task OnInitAsync()
    {
        if (IsUpdating)
        {
            Model = await HttpClient.GetJsonAsync<Models.Book>($"Books/{BookId}");
        }
        else
        {
            Model = new Models.Book();
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (IsUpdating)
        {
            await HttpClient.PutJsonAsync($"Books/{BookId}", Model);
        }
        else
        {
            await HttpClient.PostJsonAsync("Books", Model);
        }
    }

}