@page "/Lectures/{LectureId:int}"
@layout AuthenticationGuard
@inject HttpClient HttpClient

<TemplatedHeader Subtitle="Use the form below to update or create a lecture." Title="Lecture">
    <ToolbarContent>
        <a class="btn btn-primary mdi mdi-cancel" href="Lectures">Cancel</a>
    </ToolbarContent>
</TemplatedHeader>

@if (IsLoading)
{
    <TemplatedSpinner/>
}
else
{
    <EditForm Model="@Model" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        @*<div class="form-group">
            <label for="dateTime">Date Time</label>
            <InputDateTime class="form-control" id="dateTime" bind-Value="@Model.DateTime"/>
            <ValidationMessage For="@(() => Model.DateTime)"/>
        </div>*@

        @*<div class="form-group">
            <label for="duration">Duration</label>
            <InputTime class="form-control" id="duration" bind-Value="@Model.Duration"/>
            <ValidationMessage For="@(() => Model.Duration)"/>
        </div>*@

        <div class="form-group">
            <label for="run">Run</label>
            <InputSelect class="form-control" id="run" bind-Value="@Model.Run">
                @foreach (var run in Runs)
                {
                    <option value="@run">@run.ToString()</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Model.Run)"/>
        </div>

        <div class="form-group">
            <label for="room">Room</label>
            <InputSelect class="form-control" id="room" bind-Value="@Model.Room">
                @foreach (var room in Rooms)
                {
                    <option value="@room">@room.ToString()</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Model.Room)"/>
        </div>

        <button class="btn btn-primary mdi mdi-content-save" type="submit">Save</button>
    </EditForm>
}

@functions
{

    [Parameter]
    private int LectureId { get; set; }

    private bool IsCreating => LectureId <= 0;

    private bool IsLoading => Model == null || Runs == null || Rooms == null;

    private bool IsUpdating => LectureId > 0;

    private Models.Lecture Model { get; set; }
    
    private IEnumerable<Models.Run> Runs { get; set; }
    
    private IEnumerable<Models.Room> Rooms { get; set; }

    protected override async Task OnInitAsync()
    {
        Runs = await HttpClient.GetJsonAsync<IEnumerable<Models.Run>>("Runs");

        Rooms = await HttpClient.GetJsonAsync<IEnumerable<Models.Room>>("Rooms");

        if (IsUpdating)
        {
            Model = await HttpClient.GetJsonAsync<Models.Lecture>($"Lectures/{LectureId}");
        }
        else
        {
            Model = new Models.Lecture();
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (IsUpdating)
        {
            await HttpClient.PutJsonAsync($"Lectures/{LectureId}", Model);
        }
        else
        {
            await HttpClient.PostJsonAsync("Lectures", Model);
        }
    }

}