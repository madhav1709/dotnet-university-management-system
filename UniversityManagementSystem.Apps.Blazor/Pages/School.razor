@page "/Schools/{SchoolId:int}"
@layout AuthenticationGuard
@inject HttpClient HttpClient

<TemplatedHeader Subtitle="Use the form below to update or create a school." Title="School">
    <ToolbarContent>
        <a class="btn btn-primary mdi mdi-cancel" href="Schools">Cancel</a>
    </ToolbarContent>
</TemplatedHeader>

@if (IsLoading)
{
    <TemplatedSpinner/>
}
else
{
    <EditForm Model="@Model" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText class="form-control" id="name" bind-Value="@Model.Name"/>
            <ValidationMessage For="@(() => Model.Name)"/>
        </div>

        <div class="form-group">
            <label for="campus">Campus</label>
            <InputSelect class="form-control" id="campus" bind-Value="@Model.Campus">
                @foreach (var campus in Campuses)
                {
                    <option value="@campus">@campus.ToString()</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Model.Campus)"/>
        </div>

        <button class="btn btn-primary mdi mdi-content-save" type="submit">Save</button>
    </EditForm>
}

@functions
{

    [Parameter]
    private int SchoolId { get; set; }

    private bool IsCreating => SchoolId <= 0;

    private bool IsLoading => Model == null || Campuses == null;

    private bool IsUpdating => SchoolId > 0;

    private Models.School Model { get; set; }
    
    private IEnumerable<Models.Campus> Campuses { get; set; }

    protected override async Task OnInitAsync()
    {
        Campuses = await HttpClient.GetJsonAsync<IEnumerable<Models.Campus>>("Campuses");
        
        if (IsUpdating)
        {
            Model = await HttpClient.GetJsonAsync<Models.School>($"Schools/{SchoolId}");
        }
        else
        {
            Model = new Models.School();
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (IsUpdating)
        {
            await HttpClient.PutJsonAsync($"Schools/{SchoolId}", Model);
        }
        else
        {
            await HttpClient.PostJsonAsync("Schools", Model);
        }
    }

}