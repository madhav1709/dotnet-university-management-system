@page "/Assignments/{AssignmentId:int}"
@attribute [Authorize]
@layout MainLayout
@inject HttpClient HttpClient

<TemplatedHeader Subtitle="Use the form below to update or create an assignment." Title="Assignment">
    <ToolbarContent>
        <a class="btn btn-primary mdi mdi-cancel" href="Assignments">Cancel</a>
    </ToolbarContent>
</TemplatedHeader>

@if (IsLoading)
{
    <TemplatedSpinner/>
}
else
{
    <EditForm Model="@Model" OnValidSubmit="@OnValidSubmitAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="title">Title</label>
            <InputText class="form-control" id="title" @bind-Value="@Model.Title"/>
            <ValidationMessage For="@(() => Model.Title)"/>
        </div>

        <div class="form-group">
            <label for="details">Details</label>
            <InputTextArea class="form-control" id="details" @bind-Value="@Model.Details"/>
            <ValidationMessage For="@(() => Model.Details)"/>
        </div>

        @*<div class="form-group">
            <label for="deadline">Deadline</label>
            <InputDateTime class="form-control" id="deadline" @bind-Value="@Model.Deadline"/>
            <ValidationMessage For="@(() => Model.Deadline)"/>
        </div>*@

        <div class="form-group">
            <label for="run">Run</label>
            <InputSelect class="form-control" id="run" @bind-Value="@Model.Run">
                @foreach (var run in Runs)
                {
                    <option value="@run">@run.ToString()</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Model.Run)"/>
        </div>

        <button class="btn btn-primary mdi mdi-content-save" type="submit">Save</button>
    </EditForm>
}

@code
{

    [Parameter]
    private int AssignmentId { get; set; }

    private bool IsCreating => AssignmentId <= 0;

    private bool IsLoading => Model == null || Runs == null;

    private bool IsUpdating => AssignmentId > 0;

    private Models.Assignment Model { get; set; }
    
    private IEnumerable<Models.Run> Runs { get; set; }

    protected override async Task OnInitAsync()
    {
        Runs = await HttpClient.GetJsonAsync<IEnumerable<Models.Run>>("Runs");
        
        if (IsUpdating)
        {
            Model = await HttpClient.GetJsonAsync<Models.Assignment>($"Assignments/{AssignmentId}");
        }
        else
        {
            Model = new Models.Assignment();
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (IsUpdating)
        {
            await HttpClient.PutJsonAsync($"Assignments/{AssignmentId}", Model);
        }
        else
        {
            await HttpClient.PostJsonAsync("Assignments", Model);
        }
    }

}